@startuml

title __Server Class Diagram__\n

    namespace Server {
      class Server.CardShop {
          ~ sb : StringBuilder
          ~ shop : List<Card>
          - MAXCARDSINSHOP : int
          + CardShop()
          + buyCard()
          + checkCards()
          - canPlayerAffordCard()
          - topUpShop()
      }

      class Server.Deck {
          ~ deck : List<Card>
          - availableDeck : Stack<Card>
          - discardPile : Stack<Card>
          + Deck()
          + discardCard()
          + getDeck()
          + getTopCard()
          + setDeck()
          + shuffleInDiscardPile()
      }

      class Server.Dice {
          {static} + CLAWS : int
          {static} + ENERGY : int
          {static} + HEART : int
          {static} + POINT1 : int
          {static} + POINT2 : int
          {static} + POINT3 : int
          + value : int
          - random : Random
          + Dice()
          + compareTo()
          + equals()
          + hashCode()
          + rollDie()
          + toString()
      }

      class Server.DiceRollHandler {
          + DiceRollHandler()
          + checkDiceResults()
          ~ checkClaw()
          ~ checkEnergy()
          ~ checkHeart()
          ~ checkStars()
      }

      class Server.Game {
          ~ response : int[]
          - ALLDICE : int[]
          - started : boolean
          + Game()
          - checkVictory()
          - hasWon()
          - monsterTurn()
          - rollDice()
          - startGame()
      }

      class Server.GameConfigurator {
          + GameConfigurator()
          + loadDeckConfiguration()
      }

      class Server.GameState {
          + TOTALPLAYERSPOTS : int
          # dice : List<Dice>
          ~ availableMonsters : Stack<Monster>
          ~ monsters : List<Monster>
          + GameState()
          + assignMonster()
          + getAlive()
          + getMonsters()
          + rollDice()
          + setMonsterInTokyo()
      }

      abstract class Server.Monster.Monster {
                  + inFromClient : BufferedReader
                  + outToClient : DataOutputStream
                  # evolutions : Stack<Card>
                  # name : String
                  - cards : List<Card>
                  - connection : Socket
                  - currentHealth : int
                  - energy : int
                  - inTokyo : boolean
                  - isAlive : boolean
                  - maxHealth : int
                  - victoryPoints : int
                  + Monster()
                  + addCard()
                  + addEnergy()
                  + addVictoryPoints()
                  + assignPlayer()
                  + drawEvolutionCard()
                  + getCards()
                  + getCurrentHealth()
                  + getEffects()
                  + getEnergy()
                  + getMaxHealth()
                  + getName()
                  + getPlayerIntInput()
                  + getPlayerStringInput()
                  + getVictoryPoints()
                  + healHealth()
                  + isAlive()
                  + isInTokyo()
                  + reduceEnergy()
                  + reduceHealth()
                  + setInTokyo()
              }

              class Server.Playables.Card {
                          - cl : ClassLoader
                          - cost : int
                          - description : String
                          - discard : boolean
                          - effects : List<Effect>
                          - id : int
                          - name : String
                          + Card()
                          + Card()
                          + getCost()
                          + getDescription()
                          + getEffects()
                          + getId()
                          + getName()
                          + isDiscard()
                          + setCost()
                          + setDescription()
                          + setDiscard()
                          + setEffects()
                          + setId()
                          + setName()
                          + toString()
              }


              abstract class Server.Playables.Effect {
                          + getArmor()
                          + getLessCost()
                          + getMoreDamage()
                          + getMoreStars()
                          + starsWhenAttacking()
              }

    }

    Server.CardShop o-- Server.GameState : gameState
    Server.Dice .up.|> java.lang.Comparable
    Server.DiceRollHandler o-- Server.Util.EffectCalculator : effectCalculator
    Server.DiceRollHandler o-- Server.GameState : gameState
    Server.Game o-- Server.CardShop : cardShop
    Server.Game o-- Server.Util.ConnectionManager : connectionManager
    Server.Game o-- Server.Deck : deck
    Server.Game o-- Server.GameConfigurator : gameConfigurator
    Server.Game o-- Server.GameState : gameState
    Server.Game o-- Server.DiceRollHandler : rollHandler
    Server.GameState o-- Server.Deck : cardDeck
    Server.GameState o-- Server.Monster.Monster : monsterInTokyo
    Server.Monster.Monster o-- Server.Monster.Util.Printer : print
    Server.Monster.Monsters.Alienoid -up-|> Server.Monster.Monster
    Server.Monster.Monsters.Gigazaur -up-|> Server.Monster.Monster
    Server.Monster.Monsters.Kong -up-|> Server.Monster.Monster
    Server.Playables.Effects.Store.Armor1 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.CardsCostLess1 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.MoreDamage1 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.Stars1 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.Stars2 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.Stars3 -up-|> Server.Playables.Effect
    Server.Playables.Effects.Store.StarsWhenAttacking -up-|> Server.Playables.Effect




right footer

endfooter

@enduml
